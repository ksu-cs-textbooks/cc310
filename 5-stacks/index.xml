




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stacks on CC 310 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/index.html</link>
    <description>Recent content in Stacks on CC 310 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc310/5-stacks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is a Stack?</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/1-what-is-a-stack-/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/1-what-is-a-stack-/index.html</guid>
      <description>A stack is a data structure with two main operations that are simple in concept. One is the push operation that lets you put data into the data structure and the other is the pop operation that lets you get data out of the structure.
Why do we call it a stack? Think about a stack of boxes. When you stack boxes, you can do one of two things: put boxes onto the stack and take boxes off of the stack.</description>
    </item>
    <item>
      <title>Stacks in the Real World</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/2-stacks-in-the-real-world/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/2-stacks-in-the-real-world/index.html</guid>
      <description>So, where do we see stacks in the real world? A great example is repairing an automobile. It is much easier to put a car back together if we put the pieces back on in the reverse order we took them off. Thus, as we take parts off a car, it is highly recommended that we lay them out in a line. Then, when we are ready to put things back together, we can just start at the last piece we took off and work our way back.</description>
    </item>
    <item>
      <title>Stacks in Code</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/3-stacks-in-code/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/3-stacks-in-code/index.html</guid>
      <description>How do we implement stacks in code? One way would be to use something we already understand, an array. Remember that arrays allow us to store multiple items, where each entry in the array has a unique index number. This is a great way to implement stacks. We can store items directly in the array and use a special top variable to hold the index of the top of the stack.</description>
    </item>
    <item>
      <title>Basic Operations</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/4-basic-operations/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/4-basic-operations/index.html</guid>
      <description>We have already seen two basic stack operations: push and pop. However, there are others that make the stack much easier to use. These basic operations are:
push: places an item on top of the stack, pop: removes the item on the top of the stack and returns it, peek: returns the item on the top of the stack without removing it from the stack, isEmpty: returns true if there are no items on the stack, and isFull: returns true if our stack array is full.</description>
    </item>
    <item>
      <title>Using Operations</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/5-using-operations/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/5-using-operations/index.html</guid>
      <description>The following table shows an example of how to use the above operations to create and manipulate a stack. It assumes the steps are performed sequentially and the result of the operation is shown.
Step Operation Effect 1 Constructor Creates an empty stack. 2 isFull() Returns false since top is not equal to the capacity of the stack. 3 isEmpty() Returns true since top is equal to -1 4 push(1) Increments top by 1 and then places item $1$ onto the top of the stack 5 push(2) Increments top by 1 and then places item $2$ onto the top of the stack 6 push(3) Increments top by 1 and then places item $3$ onto the top of the stack 7 peek() Returns the item $3$ on the top of the stack but does not remove the item from the stack.</description>
    </item>
    <item>
      <title>Using a Stack</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/6-using-a-stack/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/6-using-a-stack/index.html</guid>
      <description>Stacks are useful in many applications. Classic real-world software that uses stacks includes the undo feature in a text editor, or the forward and back features of web browsers. In a text editor, each user action is pushed onto the stack as it is performed. Then, if the user wants to undo an action, the text editor simply pops the stack to get the last action performed, and then undoes the action.</description>
    </item>
    <item>
      <title>Path Finding Algorithm</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/7-path-finding-algorithm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/7-path-finding-algorithm/index.html</guid>
      <description>The pseudocode for finding the initial path using the stack is shown below. We assume the enclosing class has already defined a stack called myStack and the datatype called Cell, which represents the squares in the maze. The algorithm also uses three helper functions as described below:
getNextCell(maze, topCell): computes the next cell based on our current cell&amp;rsquo;s location and direction; incrementDirection(topCell): increments a cell&amp;rsquo;s direction attribute following the clockwise sequence of up, right, down, left, and then finally done, which means that we&amp;rsquo;ve tried all directions; and valid(nextCell): determines if a cell is valid.</description>
    </item>
    <item>
      <title>Stacks Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/5-stacks/8-stacks-summary/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/5-stacks/8-stacks-summary/index.html</guid>
      <description>In this module we looked at the stack data structure. Stacks are a &amp;ldquo;last in first out&amp;rdquo; data structure that use two main operations, push and pop, to put data onto the stack and to remove data off of the stack. Stacks are useful in many applications including text editor &amp;ldquo;undo&amp;rdquo; and web browser &amp;ldquo;back&amp;rdquo; functions.</description>
    </item>
  </channel>
</rss>