




  
	
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
		
	  

  
	
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
		
		
	  

  
	
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sets :: CC 310 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc310/10-sets/</link>
    <description>Welcome! This page is the main page for Sets</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Jun 2024 09:14:34 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc310/10-sets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What are Sets?</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/1-what-are-sets-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/1-what-are-sets-/</guid>
      <description>YouTube Video A set is a collection of elements that are usually related to each other. They can be sets of numbers, letters, people, cars, or even sets themselves! Thus, the elements stored in a stack, queue or list can all be considered as sets. When we define the elements in a set, we typically enclose them in curly brackets as follows.&#xA;$$&#xD;\text{A} = \{ \text{Emily}, \text{Don}, \text{Mohammed}, \text{Huichen} \}&#xD;$$ Here, $\text{A}$ is the name of the set and Emily, Don, Mohammed, and Huichen are members of set $\text{A}$.</description>
    </item>
    <item>
      <title>Operations on Sets</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/2-operations-on-sets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/2-operations-on-sets/</guid>
      <description>Now that we can create and show sets of various types of elements, there are a few interesting operations that we can perform on sets. Given two sets, $\text{A}$ and $\text{B}$, we can perform the following operations:&#xA;Union $\cup$ — a set with all the elements from both sets, Intersection $\cap$ — a set with only elements that are in both sets, Difference $\setminus$ — a set with the elements in one set that are not in the other, Disjoint $\text{A} \cap \text{B} = \emptyset$ — two sets don’t share any elements in common Subset $\subseteq$ — one set is completely contained in another set Superset $\supseteq$ — one set completely contains another set Product $\times$ — a set of all the ordered pairs where the first element is from the first set and second element is from the second set, and Powerset $\wp$ — a set of all the subsets of a given set.</description>
    </item>
    <item>
      <title>Sets in Code</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/3-sets-in-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/3-sets-in-code/</guid>
      <description>YouTube Video Different data structures can be used to represents sets and efficiently support their operations. Among the data structures considered so far, it is possible to use both lists and arrays to represent sets. Even though sets by definition are unordered, we could store the elements in order, which has its pros and cons. Storing elements in order will speed up the contains operation since we won’t have to check each element in the set.</description>
    </item>
    <item>
      <title>Set Operations</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/4-set-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/4-set-operations/</guid>
      <description>In this section, we will walk through the pseudocode for some basic set operations. We will build our set class using the doubly linked list class. In this way, we can build from the functionality that is already developed. So, in the set class, we will declare mySet as a doubly linked list and use that throughout our operations.&#xA;mySet = new doubleLinkedList()Contains The first operation we will look at is the contains operation, which checks to see if a given object already exists in our set.</description>
    </item>
    <item>
      <title>Using Sets</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/5-using-sets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/5-using-sets/</guid>
      <description>YouTube Video One of the most common uses of set operations is in database systems. While we will not create a full database system here, we will show you the basics of how they work using our set operations. Assume you have three sets of people:&#xA;$$&#xD;\text{Students} = \{ \text{&#34;Vanessa&#34;}, \text{&#34;Travis&#34;}, \text{&#34;Lu&#34;}, \text{&#34;Cole&#34;}, \text{&#34;Jordan&#34;}, \text{&#34;Elaine&#34;}, \text{&#34;Caleb&#34;} \} \\&#xD;\text{Family} = \{ \text{&#34;Amy&#34;}, \text{&#34;Scott&#34;}, \text{&#34;Vanessa&#34;}, \text{&#34;Lauren&#34;}, \text{&#34;Zachary&#34;}, \text{&#34;Jordan&#34;}, \text{&#34;Caleb&#34;} \} \\&#xD;\text{Workers} = \{\text{&#34;</description>
    </item>
    <item>
      <title>Sets Summary</title>
      <link>https://textbooks.cs.ksu.edu/cc310/10-sets/6-sets-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc310/10-sets/6-sets-summary/</guid>
      <description>In this module, we introduced a new data structure, the Set. A set is a collection of values that does not contain any duplicate items. For simplicity, we showed an implementation of a set using a doubly linked list, but we could easily use an array to store a set as well.&#xA;Sets also include several unique operations, such as union, intersection, and difference. We looked at the pseudocode for some of these operations, but a few of them are left as exercises for us to complete in the project for this module.</description>
    </item>
  </channel>
</rss>