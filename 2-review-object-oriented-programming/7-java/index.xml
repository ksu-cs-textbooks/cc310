




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on CC 310 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/index.html</link>
    <description>Recent content in Java on CC 310 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/1-functions/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/1-functions/index.html</guid>
      <description>In Java, each piece of code is broken down into functions, which are individual routines that we can call in our code. Let&amp;rsquo;s review how to create functions in Java.
Functions in Flowcharts &amp;amp; Pseudocode The table below lists the flowchart blocks used to represent functions, as well as the corresponding pseudocode:
Operation Flowchart Pseudocode Declare Function function FOO(X)
X = X + 5
return X
end function Call Function X = FOO(5) Functions in Java Declaring Functions In general, a function declaration in Java needs a few elements.</description>
    </item>
    <item>
      <title>Overloading</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/2-overloading/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/2-overloading/index.html</guid>
      <description>Java allows us to create multiple functions using the same name, or identifier, as long as they have different parameters. This could include a different number of parameters, different data types for each parameter, or a different ordering of types. The names of the parameters, however, does not matter here. This is called function overloading.
Function Overloading For example, we could create a function named max() that could take either two or three parameters:</description>
    </item>
    <item>
      <title>Functions Exercise</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/3-functions-exercise/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/3-functions-exercise/index.html</guid>
      <description>Before we learn about classes and objects, let&amp;rsquo;s do a quick exercise to review how to create and use functions in our code.
Problem Statement Write a program that accepts input from a file provided as a command-line argument. If an incorrect number of arguments are provided, or if the program is unable to open the file, it should print &amp;ldquo;Invalid Arguments&amp;rdquo; and terminate.
The program&amp;rsquo;s input will consist of a list of 100 integers, one per line.</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/4-classes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/4-classes/index.html</guid>
      <description>In programming, a class describes an individual entity or part of the program. In many cases, the class can be used to describe an actual thing, such as a person, a vehicle, or a game board, or a more abstract thing such as a set of rules for a game, or even an artificial intelligence engine for making business decisions.
In object-oriented programming, a class is the basic building block of a larger program.</description>
    </item>
    <item>
      <title>Attributes</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/5-attributes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/5-attributes/index.html</guid>
      <description>Of course, our classes are not very useful at this point because they don&amp;rsquo;t include any attributes or methods. Including attributes in a class is one of the simplest uses of classes, so let&amp;rsquo;s start there.
Adding Attributes To add an attribute to a class, we can simply declare a variable inside of our class declaration:
public class Person{ String lastName; String firstName; int age; } That&amp;rsquo;s really all there is to it!</description>
    </item>
    <item>
      <title>Methods</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/6-methods/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/6-methods/index.html</guid>
      <description>We can also add methods to our classes. These methods are used either to modify the attributes of the class or to perform actions based on the attributes stored in the class. Finally, we can even use those methods to perform actions on data provided as arguments. In essence, the sky is the limit with methods in classes, so we&amp;rsquo;ll be able to do just about anything we need to do in these methods.</description>
    </item>
    <item>
      <title>Inheritance and Polymorphism</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/7-inheritance-and-polymorphism/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/7-inheritance-and-polymorphism/index.html</guid>
      <description>We can also build classes that inherit attributes and methods from another class. This allows us to build more complex structures in our code, better representing the relationships between real world objects.
Inheritance in UML As we learned earlier in this chapter, we can represent an inheritance relationship with an open arrow in our UML diagrams, as shown below:
In this diagram, the Student class inherits from, or is a subclass of, the Person class.</description>
    </item>
    <item>
      <title>Static and Abstract</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/8-static-and-abstract/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/8-static-and-abstract/index.html</guid>
      <description>The other important modifier we can use in Java is the static modifier. Again, we&amp;rsquo;ve seen this modifier each time we declare the main method in our programs, but we haven&amp;rsquo;t really been able to discuss exactly what it means. Thankfully, we now have the knowledge we need to talk about the static modifier.
In essence, the static modifier makes an attribute or method part of the class in which it is declared instead of part of objects instantiated from that class.</description>
    </item>
    <item>
      <title>MVC Exercise</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/9-mvc-exercise/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/2-review-object-oriented-programming/7-java/9-mvc-exercise/index.html</guid>
      <description>Let&amp;rsquo;s build a quick program following the MVC architecture style to review working with classes, object, inheritance, and polymorphism.
Problem Statement Write a program to store a list of students and teachers at a school. The program should have methods to add a student or a teacher, as well as a method to print the entire list.
UML Diagram The program should conform to the following UML diagram:
Right-click and select &amp;ldquo;Open image in new tab&amp;rdquo; to view larger</description>
    </item>
  </channel>
</rss>