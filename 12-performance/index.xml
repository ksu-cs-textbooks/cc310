




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on CC 310 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/index.html</link>
    <description>Recent content in Performance on CC 310 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc310/12-performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Choosing the Right Structures</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/1-choosing-the-right-structures/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/1-choosing-the-right-structures/index.html</guid>
      <description>YouTube Video
There are several linear data structures that we can use in our programs, including stacks, queues, lists, sets, and hash tables. In this course, we have covered each of these structures in detail. However, as a programmer, one of the most difficult decisions we will make when developing a program is the choice of which data structure to use. Sometimes the choice may be obvious based on the data we plan to store or the algorithms we need to perform, but in practice that happens very rarely.</description>
    </item>
    <item>
      <title>Data Structure Performance</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/2-data-structure-performance/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/2-data-structure-performance/index.html</guid>
      <description>Data structures that are used in our programs can be characterized in terms of two performance attributes: processing time and memory usage.
We will not worry about memory usage at this point, since most of the memory used in these data structures is consumed by the data that we are storing. More technically, we would say that the memory use of a data structure containing N elements is on the order of $N$ size.</description>
    </item>
    <item>
      <title>Comparing Data Structures</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/3-comparing-data-structures/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/3-comparing-data-structures/index.html</guid>
      <description>YouTube Video
One of the best ways to compare data structures is to look at the common operations that they can perform. For this analysis, we&amp;rsquo;ve chosen to analyze the following four operations:
Insert – inserting a specific element into the structure, either in sorted order, or at the appropriate place as required by the definition of a stack or queue. Access – accessing a desired element. For general data structures, this is the process of accessing an element by its index or key in the structure.</description>
    </item>
    <item>
      <title>Arrays</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/4-arrays/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/4-arrays/index.html</guid>
      <description>YouTube Video
Unsorted Array An unsorted array is the most basic data structure, and it is supported by nearly every programming language available. Inserting elements into the array is always a constant time operation since we can simply place it at the end of the array. Of course, this assumes that the array is large enough to hold all our data without needing to be resized. Since we are not worried about memory usage, this is a safe assumption.</description>
    </item>
    <item>
      <title>Lists</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/5-lists/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/5-lists/index.html</guid>
      <description>YouTube Video
Unsorted Linked List The next data structure we learned about is the linked list. Specifically, we will look at the doubly linked list in this example, but in most instances the performance of a singly linked list is comparable.
With a linked list, the process of inserting an element at either the beginning or the end is a constant time operation since we maintain both a head and a tail reference.</description>
    </item>
    <item>
      <title>Hash Tables</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/6-hash-tables/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/6-hash-tables/index.html</guid>
      <description>YouTube Video
Hash Tables Analyzing the performance of a hash table is a bit trickier than the other data structures, mainly due to how a hash table tries to use its complex structure to get a &amp;ldquo;best of both worlds&amp;rdquo; performance outcome.
For example, consider the insert operation. In the best case, the hash table has a capacity that is large enough to guarantee that there are not any hash collisions.</description>
    </item>
    <item>
      <title>Algorithms</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/7-algorithms/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/7-algorithms/index.html</guid>
      <description>YouTube Video
We can examine the performance of the algorithms we use in a similar manner. Once again, we are concerned with both the memory usage and processing time of the algorithm. In this case, we are concerned with the amount of memory required to perform the algorithm that is above and beyond the memory used to store the data in the first place.
When analyzing searching and sorting algorithms, we&amp;rsquo;ll assume that we are using arrays as our data structure, since they give us the best performance for accessing and swapping random elements quickly.</description>
    </item>
    <item>
      <title>Choosing an Algorithm</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/8-choosing-an-algorithm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/8-choosing-an-algorithm/index.html</guid>
      <description>There are many different algorithms we can use to sort our data, and some of them can be shown mathematically to be more efficient, even in the worst case. So, how should we choose which algorithm to use?
In practice, it really comes down to a variety of factors, based on the amount of data we expect our program to handle, the randomness of the data, and more. The only way to truly know which algorithm is the best is to empirically test all of them and choose the fastest one, but even that approach relies on us predicting the data that our program will be utilizing.</description>
    </item>
    <item>
      <title>Data Structure Uses</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/9-data-structure-uses/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/9-data-structure-uses/index.html</guid>
      <description>Throughout this course, we have looked at a few ways we can use the data structures we have already learned to do something useful. In this module, we will look at a few of those examples again, as well as a few more interesting uses of the data structures that we have built.
Arrays and Linked Lists as Stacks, Queues, and Sets First and foremost, it is important to understand that we can implement many of the simpler data structures such as stacks, queues and sets using both arrays and linked lists.</description>
    </item>
    <item>
      <title>Java Libraries</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/10-java-libraries/index.html</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/10-java-libraries/index.html</guid>
      <description>Welcome! This page is the main page for Java Libraries</description>
    </item>
    <item>
      <title>Python Libraries</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/11-python-libraries/index.html</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/11-python-libraries/index.html</guid>
      <description>Welcome! This page is the main page for Python Libraries</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cc310/12-performance/12-summary/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc310/12-performance/12-summary/index.html</guid>
      <description>In this module, we reviewed each of the data structures we have explored in this class. Most importantly, we looked at how they compare in terms of performance and discussed some of the best and most efficient ways to use them in our programs.
Using that information, we introduced the standard collection libraries for both Java and Python, and saw how those professional implementations closely follow the same ideas and analysis that we saw in our own structures.</description>
    </item>
  </channel>
</rss>